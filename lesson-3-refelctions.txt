When would you want to create a remote repository rather than keeping all your work local?
  When collaborating with other users it's easier to share updates by using a remote 
  repository. This way others can contribute, and get changes too.
  
Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?
  Changes can cause conflicts. If you are in the process of creating a new feature, you 
  don't want to solve those conflicts but finish your feature first.
  This way you can keep focus and decide when you want to get the latest versions and 
  integrate changes.

Describe the differences between forks, clones, and branches. When would you use one 
instead of another?
  Forking means making a copy of smb's repository directly on github servers. Cloning
  means making a copy of a repository to local computer. Branching is process of working on
  some feature or bug separately, leaving master code intact.
  Fork is used when you don't have access to repository, but want to work on it and make 
  changes. It's also easy to make pull request to the original repository.
  If you want to work on a code offline on you computer, with some IDE maybe, then you
  use clone.
  If you wark on a new feature, or fix a bug, then you make a branch and commit changes
  there.

What is the benefit of having a copy of the last known state of the remote stored locally?
  You can work offline, it saves a lot of data overhead when pushing changes to github 
  and it gives the possibility to do a quick check which changes are made in the online 
  repo compared to the offline repository.

How would you collaborate without using Git or GitHub? What would be easier, and what 
would be harder?
  Harder collaboration, I would have to send project with changes to each other after 
  each change. I'm loosing project changes. It's harger to combine work of multiple 
  people this way.
  The only think I can think of that is easier without using Git is that you don't need 
  to learn how Git works, and other techniques are simpler.

When would you want to make changes in a separate branch rather than directly in master? 
What benefits does each approach have?
  When i make change in a separate branch, i leave main code unchanged, so several people
  can work on different parts of the project at the same time. Also we can upload our
  branches to GitHub and make a pull request. That way we can contribute to other
  projects. This way we even may not have wright access rigths to the project.
  The only benefit i can think of making changes directly in master is that it's less
  complicated. This lets you make less operations but you can do this only if you work
  alone on the project.
  
Commands:
  
git remote  |  Show all remote locations for the repository
git remote -v  |  Show urls of remote locations
git remote add origin url  |  Add a new remote location for the repository. Origin is 
                              the default name to use when you create only one remote 
                              location. Url should be the https url to the github
                              repository.
git push origin master  |  Push new commits in master branch to origin remote
git pull origin master  |  Get the master branch from the remote location origin.
git pull origin master  |  = git fetch origin + git merge master origin/master
git fetch origin  |    Get the changes from the remote location into the (hidden?) origin/master branch
git branch -a  |  List both remote-tracking branches and local branches.

